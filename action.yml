name: Prepare Tag
description: 'Prepare docker tag'
inputs:
  registry:
    required: true
    description: Docker registry
  context:
    required: false
    description: 'Context directory'
    default: .
  image_name:
    required: false
    default: ${{ github.event.repository.name }}
    description: Image name
  manifest_version:
    required: true
    description: 'Manifest version (package.json, pom.xml etc)'
outputs:
  tags:
    description: 'List of docker tags'
    value: ${{ steps.prepare.outputs.tags }}
  version:
    description: 'List of docker version'
    value: ${{ steps.prepare.outputs.version }}
  manifest_version:
    description: 'List of maven version'
    value: ${{ steps.prepare.outputs.manifest_version }}
runs:
  using: composite
  steps:
    -
      id: prepare
      name: Prepare
      shell: bash
      run: |
        DOCKER_IMAGE=${{ inputs.registry }}/${{ inputs.image_name }}
        VERSION=noop
        BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$BRANCH

          if [[ "${{ github.event.repository.default_branch }}" == "$VERSION" ]]; then
            VERSION=latest
          elif [[ "develop" == "$VERSION" ]]; then
            VERSION=next
          fi
        fi

        TAGS="${DOCKER_IMAGE}:${VERSION}"

        # if [ -z "${{ inputs.manifest_version }}" ]; then
        TAGS="$TAGS,${DOCKER_IMAGE}:${{ inputs.manifest_version }}"
        # fi


        if [ -z $BRANCH ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:${BRANCH}"
        fi

        if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
        fi

        echo ::set-output name=manifest_version::${{ inputs.manifest_version }}
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}

name: Prepare Tag
description: 'Prepare docker tag'
inputs:
  type:
    required: true
    description: 'Valid types (node | maven)'
  registry:
    required: true
    description: Docker registry
  context:
    required: false
    description: 'Context directory'
    default: .
  image_name:
    required: false
    default: ${{ github.event.repository.name }}
    description: Image name
outputs:
  tags:
    description: 'List of docker tags'
    value: ${{ steps.prep.tags }}
  version:
    description: 'List of docker version'
    value: ${{ steps.prep.version }}
  mvnVersion:
    description: 'List of maven version'
    value: ${{ steps.prep.mvnVersion }}
  pkgVersion:
    description: 'List of package version'
    value: ${{ steps.prep.pkgVersion }}
runs:
  using: composite
  steps:
    -
      name: Read Package Version
      if: ${{ inputs.type == 'node' }}
      id: package-version
      uses: martinbeentjes/npm-get-version-action@main
      with:
        path: ${{ inputs.context }}
    -
      name: Set up JDK 17
      uses: actions/setup-java@v1
      if: ${{ inputs.type == 'maven' }}
      with:
        java-version: 17
        server-id: github
        server-username: MVN_USERNAME_REF
        server-password: MVN_TOKEN_REF
    -
      id: mvn
      shell: bash
      name: Build with Maven
      if: ${{ inputs.type == 'maven' }}
      env:
        MVN_TOKEN_REF: ${{ secrets.MVN_TOKEN }}
        MVN_USERNAME_REF: ${{ secrets.MVN_USERNAME }}
      run: echo ::set-output name=pom_version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//g')
    -
      name: Prepare
      shell: bash
      run: |
        DOCKER_IMAGE=${{ inputs.registry }}/${{ inputs.image_name }}
        VERSION=noop
        BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')

        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$BRANCH

          if [[ "${{ github.event.repository.default_branch }}" == "$VERSION" ]]; then
            VERSION=latest
          elif [[ "develop" == "$VERSION" ]]; then
            VERSION=next
          fi
        fi

        TAGS="${DOCKER_IMAGE}:${VERSION}"

        if [[ "${{ inputs.type }}" == "node" ]]; then
          PACKAGEJSON_VERSION=${{ steps.package-version.outputs.version }}

          if [ -z $PACKAGEJSON_VERSION ]; then
            TAGS="${TAGS},${DOCKER_IMAGE}:${PACKAGEJSON_VERSION}"
          fi
        fi

        if [[ "${{ input.type }}" == "maven" ]]; then
          MANIFEST_VERSION=${{ steps.mvn.outputs.pom_version }}

          if [ -z $MANIFEST_VERSION ]; then
            TAGS="${TAGS},${DOCKER_IMAGE}:${MANIFEST_VERSION}"
          fi
        fi

        if [ -z $BRANCH ]; then
          TAGS="$TAGS,${DOCKER_IMAGE}:${BRANCH}"
        fi

        if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
        fi

        echo ::set-output name=mvnVersion::${MANIFEST_VERSION}
        echo ::set-output name=pkgVersion::${PACKAGEJSON_VERSION}
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
